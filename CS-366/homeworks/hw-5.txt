3) (a)

tsp(weight, x){
    // minCost will contain the cost of a minimum tour
    // minTour will contain the ordering (tour) of vertices
    // Assume both minCost and minTour are global variables.
    // weight is the n x n weight matrix
    // (weight[i][j] > 0 when vertex i and j are adjacent)
    // x is the array used to backtrack through possible tours
    // used keeps track of which vertices are used – no repeats
   
    n = adj.last
    x[1] = 1 // can assume any tour of vertices
    used[1] = true // begins and ends at vertex 1

    minCost = MAXINT
    minTour[1] = 1

    for i = 2 to n  // On order of O(n)
        used[i] = false
    if (rtsp(weight, 2 , x))
        // output solution (list vertices on tour and minimum cost)  // O(n)
}

rtsp(w, k, x) {
    // returns true if x[1],x[2],...,x[k] is a (partial) tour
    n = adj.last
    for j = 2 to n {  // O(n)
        x[k] = j
        if (path_ok(w, k, x)) {   // O(1)
            used[x[k]] = true
            if (k == n) {
                // found a tour; find total cost and compare to minCost
                curSum = 0
                for a = 1 to n   // O(n^2)
                    curSum = curSum + weight[x[a]][x[a+1]]
                if (min(curSum, minCost) == curSum)
                    minCost = min(curSum, minCost)
                    minTour = x
            }
            else
                rtsp(w, k+1, x)   // T(n-1)
            used[x[k]] = false
        }
    }
    return false
}

path_ok(w, k, x) {
    n = a.last
    if (used[x[k]])
        return false
    if (k < n) // check if x[k-1] and x[k] are adjacent
    {
        if (weight[x[k]][x[k-1]] > 0)
            return true
        else
            return false
    }
    else {
        if (weight[x[k]][1] > 0)
            return true
        else
            return false
    }
}

(b) T(n) = n * T(n-1)
         = n-1 * T(n-2)
         = n-1 * n-2 * T(n-3) = θ(n!)
    I decided on the recurrence for this algorithm as listed above because the recursive call, shown above to be called T(n-1) times, is found 
    within a loop with a time complexity on the order of O(n). Therefore, that recursive call is made n times and T(n) is multiplied by n
    in the recurrence. As shown above, when iterated through the recurrence is equivalent to θ(n!).